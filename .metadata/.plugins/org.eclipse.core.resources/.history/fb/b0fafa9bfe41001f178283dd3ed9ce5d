package com.shopme.admin.category;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.shopme.admin.FileUploadUtil;
import com.shopme.admin.MessageAlertCheckNull;
import com.shopme.admin.exception.CategoryNotFoundException;
import com.shopme.admin.exception.UserNotFoundException;
import com.shopme.common.entity.Category;
import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;




@Controller
public class CategoryController {

	@Autowired
	private CategoryService cateService;
	
	@GetMapping("/categories")
	public String listAll(@RequestParam(name = "sortDir", required = false, defaultValue = "asc") String sortDir, Model model) {
		
		String reserverSortDir = sortDir.equals("asc") ? "desc" : "asc";
		
		List<Category> listCategories = cateService.listAll(sortDir);
		
		model.addAttribute("listcategories", listCategories);
		model.addAttribute("reserverSortDir", reserverSortDir);
		
		return "categories/categories";
	}
	
	@GetMapping("/categories/new")
	public String newCategory(Model model) {
		List<Category> listCategories= cateService.listCategoriesUsedInForm();
		Category category = new Category();
		model.addAttribute("category", category);
		model.addAttribute("listcategories", listCategories);
		model.addAttribute("pageTitle", "Create new Category");
		return "categories/categories_form";
	}
	
	@PostMapping("/categories/save") 
	public String saveCategory(Category category, Model model,
			@RequestParam("fileImage") MultipartFile multipartFile,
			RedirectAttributes redirectAttributes) throws IOException {
		Category saveCategory = null;
		if(!multipartFile.isEmpty()) {
			String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
			category.setImage(fileName);
			
			saveCategory = cateService.saveCategory(category);
			String uploadDir = "../categories-images/" + saveCategory.getId();
			
			
			FileUploadUtil.cleanDir(uploadDir);
			
			FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
			
		} else {
			saveCategory= cateService.saveCategory(category);
		}
	
	
		MessageAlertCheckNull.alertCheckNull(saveCategory, redirectAttributes);
		return "redirect:/categories";
	}
	
	@GetMapping("/categories/edit/{id}")
	public String editCategory(@PathVariable("id") Integer id, 
	                           Model model, 
	                           RedirectAttributes redirectAttributes) {
	    try {
	        List<Category> listCategories = cateService.listCategoriesUsedInForm();
	        Category category = cateService.getCategoryById(id);

	        model.addAttribute("category", category);
	        model.addAttribute("pageTitle", "Edit Category (ID : " + id + ")");
	        model.addAttribute("listcategories", listCategories); 

	        return "categories/categories_form";
	    } catch (CategoryNotFoundException e) {
	        redirectAttributes.addFlashAttribute("message", e.getMessage());
	        redirectAttributes.addFlashAttribute("typeAlert", "danger");
	        return "redirect:/categories";
	    }
	}

	@GetMapping("/categories/{id}/enabled/{status}")
	public String updateCategoryEnabledStatus(@PathVariable("id") Integer id, @PathVariable("status") boolean enabled, RedirectAttributes redirectAttributes) {
		
		cateService.updatedCategoryEnabledStatus(id, enabled);
		String status = enabled ? "enabled" : "disabled";
		 
		String message = "The Category ID " + id +" has been " + status;
		
		redirectAttributes.addFlashAttribute("message", message);
		redirectAttributes.addFlashAttribute("typeAlert", "success");
		
		return "redirect:/categories";
		
	}
	
	@GetMapping("/categories/delete/{id}")
	public void deleteUser(@PathVariable("id") Integer id,
			Model model,
			RedirectAttributes redirectAttributes) {
		try {
		
			cateService.deleteById(id);
			
			redirectAttributes.addFlashAttribute("message", "The Category ID " + id + " has been deleted successfully");
			redirectAttributes.addFlashAttribute("typeAlert", "success");
			
			return "redirect:/categories";
		} catch (CategoryNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			redirectAttributes.addFlashAttribute("typeAlert", "danger");
			return "redirect:/categories";
		}
		
	}
	
}
