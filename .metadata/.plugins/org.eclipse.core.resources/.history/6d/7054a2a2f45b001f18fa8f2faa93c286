package com.shopme.admin.product;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.admin.FileUploadUtil;
import com.shopme.admin.MessageAlertCheckNull;
import com.shopme.admin.brand.BrandService;
import com.shopme.admin.category.CategoryService;
import com.shopme.admin.contstant.SystemConstant;
import com.shopme.admin.exception.CategoryNotFoundException;
import com.shopme.admin.exception.ProductNotFoundException;
import com.shopme.common.entity.Brand;
import com.shopme.common.entity.Category;
import com.shopme.common.entity.Product;
import com.shopme.common.entity.ProductDetail;
import com.shopme.common.entity.ProductImage;
import com.shopme.admin.security.ShopmeUserDetails;
@Controller
public class ProductController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ProductController.class);
	@Autowired
	private ProductService productService;

	@Autowired
	private BrandService brandService;

	@Autowired
	private CategoryService categoryService;

	// 
	private final ExecutorService executorService = Executors.newFixedThreadPool(4);

	
	@GetMapping("/products")
	public String listFirstPgae(Model model) {
		return listByPage(1, "asc", "name",null, 0 ,model);
	}
	
	@GetMapping("/products/page/{pageNum}")
	public String listByPage(@PathVariable(name="pageNum") int pageNum,
			 @RequestParam(name = "sortDir", defaultValue = "asc") String sortDir,
			 @RequestParam(name = "sortField", defaultValue = "name") String sortField,
             @RequestParam(name = "keyword", required = false) String keyword,
             @RequestParam(name= "categoryId", required = false) Integer categoryId,
	                         Model model) {

	
	    Page<Product> page = productService.listByPage(pageNum, sortField, sortDir, keyword, categoryId);
	    List<Product> listProducts  = page.getContent();
	    
	    List<Category> listCategories = categoryService.listCategoriesUsedInForm();

	
	 // tinh vi tri hien tai
		long startCount= (pageNum - 1) * SystemConstant.BRANDS_PER_PAGE + 1;
		
		long endCount = startCount + SystemConstant.BRANDS_PER_PAGE - 1;
		
		if(endCount > page.getTotalElements()) {
			endCount = page.getTotalElements();
		}
		
	    // categoryId 
	    if(categoryId != null ) model.addAttribute("categoryId", categoryId);
		
		// show categories user form filter
		model.addAttribute("listCategories", listCategories);
		// reserver sort firstName
		String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";
		
		// show paging 
		model.addAttribute("currentPage", pageNum);
		model.addAttribute("totalPages", page.getTotalPages());
		model.addAttribute("startCount", startCount);
		model.addAttribute("endCount", endCount);
		model.addAttribute("totalItems", page.getTotalElements()); // total user
		model.addAttribute("listProducts", listProducts);
		
		// sort
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		
		// reverse sort
		model.addAttribute("reverseSortDir", reverseSortDir);
		
		// keyword
		model.addAttribute("keyword", keyword);
		
		return "products/products";
	}

	
	@GetMapping("/products/new")
	public String newProduct(Model model) {

		List<Brand> listBrands = brandService.listAll();

		Product product = new Product();
		product.setEnabled(true);
		product.setInStock(true);
	
		if (product.getCategory() == null) {
			product.setCategory(new Category());
		}
		if (product.getBrand() == null) {
			product.setBrand(new Brand());
		}

		model.addAttribute("product", product);
		model.addAttribute("listBrands", listBrands);
		model.addAttribute("pageTitle", "Create New Product");
		model.addAttribute("numberOfExistingExtraimages", 0);

		return "products/product_form";
	}
	@PostMapping("/products/save")
	public String saveProduct(Product product, RedirectAttributes ra,
			@RequestParam(value = "fileImage", required = false) MultipartFile mainImageMultipart,
			@RequestParam(value = "extraImage", required = false) MultipartFile[] extraImageMultiparts,
			@RequestParam(name = "detailIDs", required = false) String[] detailIDs,
			@RequestParam(name = "detailNames", required = false) String[] detailNames,
			@RequestParam(name = "detailValues", required = false) String[] detailValues,
			@RequestParam(name = "imageIDs", required = false) String[] imageIDs,
			@RequestParam(name = "imageNames", required = false) String[] imageNames,
			@AuthenticationPrincipal ShopmeUserDetails loggedUser
			) throws IOException {

		if(loggedUser.hasRole("Salesperson"))
		
		setMainImageName(mainImageMultipart, product);

		// Xử lý hình ảnh phụ đã có
		setExistingExtraImageNames(imageIDs, imageNames, product);
		// Xử lý hình ảnh phụ mới
		setNewExtraImageNames(extraImageMultiparts, product);

		// Cập nhật các chi tiết sản phẩm
		setProductDetails(detailIDs, detailNames, detailValues, product);

		// Lưu sản phẩm vào cơ sở dữ liệu
		Product savedProduct = productService.saveProduct(product);

		// Lưu các hình ảnh đã tải lên
		saveUploadedImages(mainImageMultipart, extraImageMultiparts, savedProduct);

		// Xóa các hình ảnh phụ không còn trong form
		deleteExtraImagesWeredRemovedOnForm(product);

		// Kiểm tra và thông báo kết quả
		MessageAlertCheckNull.alertCheckNull(savedProduct, ra);

		return "redirect:/products";

	}

	private void deleteExtraImagesWeredRemovedOnForm(Product product) {
		String extraImageDir = "../product-images/" + product.getId() + "/extra-images";
		Path dirPath = Paths.get(extraImageDir);

		try {
			Files.list(dirPath).forEach(file -> {
				String fileName = file.toFile().getName();

				if (!product.containsImageName(fileName)) {
					executorService.submit(() -> {
						try {
							if (Files.exists(file)) {
								Files.delete(file);
								LOGGER.info("Deleted extra image: " + fileName);
							}
						} catch (IOException e) {
							LOGGER.error("Could not delete extra image: " + fileName, e);
						}
					});
				}
			});
		} catch (IOException e) {
			LOGGER.error("Could not list directory: " + dirPath, e);
		}
	}

	private void setExistingExtraImageNames(String[] imageIds, String[] imageNames, Product product) {
	    if (imageIds == null || imageIds.length == 0) return;

	    Set<ProductImage> images = new HashSet<>();

	    for (int count = 0; count < imageIds.length; count++) {
	        if (imageIds[count] == null || imageIds[count].isEmpty()) continue;
	        if (count > imageNames.length) continue;  // Kiểm tra giới hạn mảng imageNames

	        Integer id = Integer.parseInt(imageIds[count]);
	        String name = imageNames[count];

	        images.add(new ProductImage(id, name, product));
	    }
	    product.setImages(images);
	}



	private void setProductDetails(String[] detailIDs, String[] detailNames, 
			String[] detailValues, Product product) {
		if (detailNames == null || detailNames.length == 0) return;
		
		for (int count = 0; count < detailNames.length; count++) {
			String name = detailNames[count];
			String value = detailValues[count];
			Integer id = Integer.parseInt(detailIDs[count]);
			
			if (id != 0) {
				product.addDetail(id, name, value);
			} else if (!name.isEmpty() && !value.isEmpty()) {
				product.addDetail(name, value);
			}
		}
	}

	private void saveUploadedImages(MultipartFile mainImageMultipart, MultipartFile[] extraImageMultiparts,
			Product savedProduct) throws IOException {
		if (!mainImageMultipart.isEmpty()) {
			String fileName = StringUtils.cleanPath(mainImageMultipart.getOriginalFilename());
			String uploadDir = "../product-images/" + savedProduct.getId();
			FileUploadUtil.cleanDir(uploadDir);
			FileUploadUtil.saveFile(uploadDir, fileName, mainImageMultipart);
		}

		// Lưu các hình ảnh phụ
		if (extraImageMultiparts.length > 0) {
			String uploadDir = "../product-images/" + savedProduct.getId() + "/extra-images";

			for (MultipartFile multipartFile : extraImageMultiparts) {
				if (multipartFile.isEmpty())
					continue;
				String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());

				FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);

			}
		}
	}

	private void setNewExtraImageNames(MultipartFile[] extraImageMultiparts, Product product) {
		if (extraImageMultiparts.length > 0) {
			for (MultipartFile multipartFile : extraImageMultiparts) {
				if (!multipartFile.isEmpty()) {
					String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
					
					if (!product.containsImageName(fileName)) {
						product.addExtraImage(fileName);
					}
				}
			}
		}
	}

	private void setMainImageName(MultipartFile mainImageMultipart, Product product) {
		if (!mainImageMultipart.isEmpty()) {
			String fileName = StringUtils.cleanPath(mainImageMultipart.getOriginalFilename());
			product.setMainImage(fileName);
		}
	}

	@GetMapping("/products/{id}/enabled/{status}")
	public String updateProductEnabledStatus(@PathVariable(name = "id") Integer id,
			@PathVariable(name = "status") boolean enabled, RedirectAttributes redirectAttributes) {

		productService.updateStatusProduct(id, enabled);
		String status = enabled ? "enabled" : "disabled";

		String message = "The Product ID " + id + " has been " + status;

		redirectAttributes.addFlashAttribute("message", message);
		redirectAttributes.addFlashAttribute("typeAlert", "success");

		return "redirect:/products";

	}

	@GetMapping("/products/delete/{id}")
	public String deleteUser(@PathVariable("id") Integer id, Model model, RedirectAttributes redirectAttributes) {
		try {

			productService.deleteById(id);
			String uploadImageExtraDir = "../product-images/" + id + "/extra-images";
			String uploadExtraDir = "../product-images/" + id;

			FileUploadUtil.removeDir(uploadImageExtraDir);
			FileUploadUtil.removeDir(uploadExtraDir);

			redirectAttributes.addFlashAttribute("message", "The Product ID " + id + " has been deleted successfully");
			redirectAttributes.addFlashAttribute("typeAlert", "success");

			return "redirect:/products";
		} catch (CategoryNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			redirectAttributes.addFlashAttribute("typeAlert", "danger");
			return "redirect:/products";
		}

	}

	@GetMapping("/products/edit/{id}")
	public String editProduct(@PathVariable("id") Integer id, Model model, RedirectAttributes redirectAttributes) {
		try {
			Product product = productService.get(id);

			Integer numberOfExistingExtraImages = product.getImages().size();

			model.addAttribute("product", product);
			model.addAttribute("pageTitle", "Edit Product (ID: " + id + ")");
			model.addAttribute("numberOfExistingExtraImages", numberOfExistingExtraImages);

			List<Brand> listBrands = brandService.listAll();
			model.addAttribute("listBrands", listBrands);

			MessageAlertCheckNull.alertCheckNull(product, redirectAttributes);

			return "products/product_form";
		} catch (ProductNotFoundException e) {
			MessageAlertCheckNull.alertCheckNull(null, redirectAttributes);
			return "redirect:/products";
		}
	}

	@GetMapping("/products/detail/{id}")
	public String viewProductDetails(@PathVariable("id") Integer id, Model model,
			RedirectAttributes redirectAttributes) {
		try {
			Product product = productService.get(id);

			model.addAttribute("product", product);

			List<Brand> listBrands = brandService.listAll();
			model.addAttribute("listBrands", listBrands);

			MessageAlertCheckNull.alertCheckNull(product, redirectAttributes);

			return "products/product_detail_modal";
		} catch (ProductNotFoundException e) {
			MessageAlertCheckNull.alertCheckNull(null, redirectAttributes);
			return "redirect:/products";
		}
	}

}
