package com.shopme.admin.setting.state;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jmx.support.ObjectNameManager;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.shopme.admin.setting.country.CountryRepository;
import com.shopme.admin.state.StateRepository;
import com.shopme.common.entity.Country;
import com.shopme.common.entity.State;

@SpringBootTest
@AutoConfigureMockMvc
public class StateRestControllerTest {

	@Autowired MockMvc mockMvc;
	
	@Autowired ObjectMapper objectMapper;
	
	@Autowired CountryRepository countryRepository;
	
	@Autowired StateRepository stateRepository;
	
	@Test
	@WithMockUser(username="nam", password="something", roles="Admin")
	public void testListCoutries() throws Exception {
		Integer countryId = 2;
		
		String url = "/state/list_by_country/" + countryId;
		
		MvcResult result = mockMvc.perform(get(url))
				.andExpect(status().isOk())
		        .andDo(print())
		        .andReturn();
		String jsonReponse = result.getResponse().getContentAsString();
		State[] state = objectMapper.readValue(jsonReponse, State[].class);
		
		assertThat(state).hasSizeGreaterThan(1);
	}
	
	@Test
	@WithMockUser(username ="nam@codejava.net", password = "java2020", roles = "ADMIN")
	public void testCreateState() throws Exception {
		
		String url = "/state/save";
		Integer countryId = 1;
		Country country = countryRepository.findById(countryId).get();
		State state = new State("Arizona", country);
		
		MvcResult result = mockMvc.perform(post(url).contentType("application/json")
				.content(objectMapper.writeValueAsString(state)).with(csrf()))
		        .andDo(print())
		        .andExpect(status().isOk())
		        .andReturn();
		
		String jsonReponse = result.getResponse().getContentAsString();
		Integer stateId = Integer.parseInt(jsonReponse);
		
		Optional<State> findById = stateRepository.findById(stateId);
		
		
		assertThat(findById.isPresent());
	}
	
	@Test
	@WithMockUser(username="nam", password="something", roles="Admin")
	public void testUpdateState() throws Exception {
		
		String url = "/state/save";
		Integer countryId = 1;
		Country country = countryRepository.findById(countryId).get();
		country.
		
		MvcResult result = mockMvc.perform(post(url).contentType("application/json")
				.content(objectMapper.writeValueAsString(state)).with(csrf()))
		        .andDo(print())
		        .andExpect(status().isOk())
		        .andReturn();
		
		String jsonReponse = result.getResponse().getContentAsString();
		Integer stateId = Integer.parseInt(jsonReponse);
		
		Optional<State> findById = stateRepository.findById(stateId);
		
		
		assertThat(findById.get().getName()).isEqualTo(state.getName());
	}
}
