package com.shopme.admin.product;

import java.util.Date;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.shopme.admin.exception.CategoryNotFoundException;
import com.shopme.admin.exception.ProductNotFoundException;
import com.shopme.common.entity.Product;
import com.shopme.common.entity.ProductImage;

@Service
@Transactional
public class ProductService {

	@Autowired
	private ProductRepository productRepository;
	
	public List<Product> findAll() {
		return (List<Product>) productRepository.findAll();
	}
	
	
	
	@Transactional
	public Product saveProduct(Product product) {
	    if (product.getId() == null) {
	        product.setCreatedTime(new Date());
	    }
	    
	    // Thiết lập alias
	    if (product.getAlias() == null || product.getName() == null || product.getName().isEmpty()) {
	        String defaultAlias = product.getName() != null ? product.getName().replace(" ", "-") : "default-alias";
	        product.setAlias(defaultAlias);
	    } else {
	        product.setAlias(product.getAlias().replace(" ", "-"));
	    }

	    // Cập nhật thời gian
	    product.setUpdatedTime(new Date());


	    return productRepository.save(product);
	}


	public String checkUnique(Integer id, String name) {
		boolean checkProduct = (id == null || id == 0);
		Product productByName = productRepository.findByName(name);
		if(checkProduct) {
			if(productByName != null) return "Duplicate";
		} else {
			if(productByName != null && productByName.getId() != id) return "Duplicate";
		}
		return "OK";
		
	}

	public void updateStatusProduct(Integer id, boolean enabled) {
		productRepository.updateEnabledStatus(id, enabled);
		
	}

	public void deleteById(Integer id) throws CategoryNotFoundException {
		Long countById = productRepository.countById(id);

		if (countById == null || countById == 0) {
			throw new CategoryNotFoundException("Could not find any Product with ID " + id);
		}

		productRepository.deleteById(id);
	}
	
	public Product get(Integer id) throws ProductNotFoundException {
		try {
			return productRepository.findById(id).get();
		} catch (Exception e) {
			throw new ProductNotFoundException("Could nopt find any product with ID " + id);
		}
		
	}
	
	
}
