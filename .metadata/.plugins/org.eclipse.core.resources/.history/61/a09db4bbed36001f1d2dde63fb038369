package com.shopme.admin.user;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;

import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder.In;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@DataJpaTest(showSql = false) // Cấu hình kiểm thử JPA với các thành phần cần thiế
@AutoConfigureTestDatabase(replace = Replace.NONE) // chỉ định sd csdl ở app ko đc thay thế
@Rollback(false) // Giữ lại các thay đổi trong cơ sở dữ liệu sau khi kiểm thử kết thúc.
public class UserRepositoryTests {

	
	@Autowired
	private UserRepository repo;
	
	@Autowired
	private TestEntityManager entityManager;
	
//	@Test
	public void testCreateUserWithOneRole() {
		Role roleAdmin = entityManager.find(Role.class,1);
		User userThanh = new User("phong@gmail.com", "123", "Phong", "Nguyen");
		userThanh.addRole(roleAdmin);
		User userSave =  repo.save(userThanh);
		 assertThat(userSave.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testCreateUsersWithRoles() {
		Role roleEditor = new Role(3);
		Role roleAssistant = new Role(5);
		User userRavi = new User("rnvi@gmail.com", "123", "Ra", "Vi");
		
		// add role into User
		userRavi.addRole(roleEditor);
		userRavi.addRole(roleAssistant);
		
		User userSave =  repo.save(userRavi);
		 assertThat(userSave.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testGetListUsers() {
		Iterable<User> userList = repo.findAll();
		
		userList.forEach(user->System.out.println(user.toString()));
		
	}
	
	@Test
	public void testUserById() {
		User userThanh = repo.findById(1).get();
		System.out.println(userThanh);
		assertThat(userThanh).isNotNull();
	}
	
	@Test
	public void testUpdateUserById() {
		User userThanh = repo.findById(1).get();
		userThanh.setEnabled(true);
		userThanh.setEmail("nthanh@gmail.com");
		User userSave = repo.save(userThanh);
		assertThat(userSave).isNotNull();
	}
	
	@Test
	public void testUpdateUserByIdRole() {
		User userRavi = repo.findById(3).get();
		Role roleSalesperson = new Role(1);
		Role roleShipper = new Role(2);
		userRavi.getRoles().remove(roleSalesperson);
		
		userRavi.addRole(roleShipper);
		repo.save(userRavi);
		
	}
	
	@Test
	public void testDeleteUserById() {
		User userRavi = repo.findById(3).get();
		repo.deleteById(userRavi.getId());
	}
	
	@Test
	public void testGetUserByEmail() {
		String email= "nthanh@gmail.com";
		User user = repo.getUserByEmail(email);
		
		assertThat(user).isNotNull();
	}
	
	@Test
	public void testCountById() {
		Integer id = 4;
		
		Long countId = repo.countById(id);
		
		assertThat(countId).isNotNull().isGreaterThan(0);
	}
	
	@Test
	public void disbledUser() {
		Integer id = 1;
		repo.updateEnabledStatus(id, false);
		
	
	}
	
	@Test
	public void testListFirstPage() {
		int pageNumber = 0;
		
		int pageSize = 4;
		
		Pageable pageable = PageRequest.of(pageNumber, pageSize);
		
		Page<User> page = repo.findAll(pageable);
		
		List<User> listUsers  = page.getContent();
		
		listUsers.forEach(user -> System.out.println(user));
		
		assertThat(listUsers.size()).isEqualTo(pageSize);
		
		
	}
	
	@Test
	public void testSearchUsers() {
		String keyword = "bruce";
		int pageNumber = 0;
		
		int pageSize = 4;
		
		Pageable pageable = PageRequest.of(pageNumber, pageSize);
	
		
		Page<User> page = repo.findAll(keyword,pageable );
	}
}
