package com.shopme.admin.category;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.data.domain.Sort;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.Category;

@DataJpaTest(showSql = false) // Cấu hình kiểm thử JPA với các thành phần cần thiế
@AutoConfigureTestDatabase(replace = Replace.NONE) // chỉ định sd csdl ở app ko đc thay thế
@Rollback(false) // Giữ lại các thay đổi trong cơ sở dữ liệu sau khi kiểm thử kết thúc.
public class CategoryRepositoryTests {

	@Autowired
	private CategoryRepository cateRepo;
	
	@Test
	public void testCreateRootCategory() {
		Category category= new Category("Electronics");
		
		Category save = cateRepo.save(category);
		
		assertThat(save.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testCreateSubCategory() {
		Category  parent = new Category(5);
	
		Category memory = new Category("Memory", parent);

		Category saveSub= cateRepo.save(memory);
		
		assertThat(saveSub.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testGetCategory() {
		Category  category = cateRepo.findById(5).get();
		System.out.println(category.getName());
	
		Set<Category> children = category.getChildren();
		
		for (Category subCategory : children) {
			System.out.println(subCategory.getName());
		}
	
		assertThat(children.size()).isGreaterThan(0);
	}
	
	@Test
	public void testPrintHirerarchicalCategories() {
		Iterable<Category> categories = cateRepo.findAll();
		for (Category category : categories) {
			if(category.getParent() == null) {
				System.out.println(category.getName());
				
				Set<Category> children = category.getChildren();
				
				for (Category subcate : children) {
					
					System.out.println("--" + subcate.getName());
					testPrintChildren(subcate, 1);
					
				}
			}
		}

	}
	
	@Test
	public void testPrintChildren(Category parent , int subLevel) {
		int newSubLevel = subLevel + 1;
	
		Set<Category> children = parent.getChildren();
	
		for (Category subCategory : children) {
			
			for (int i = 0; i < newSubLevel; i++) {

				System.out.print("--");
			}
			
			System.out.println(subCategory.getName());
	
			testPrintChildren(subCategory, newSubLevel);
		}

	}
	
	@Test
	public void testListRootCategories() {
		List<Category> listRootCategories = cateRepo.findRootCategories(Sort.by("name").ascending());
		
		listRootCategories.forEach(cate -> System.out.println(cate.getName()));
	}
	
	@Test
	public void testFindByName() {
		String name = "Computerss";
		
		Category category = cateRepo.findByName(name);
		
		assertThat(category).isNotNull();
		assertThat(category.getName()).isEqualTo(name);
	}
	
	@Test
	public void testFindByAlias() {
		String alias = "Electronics";
		
		Category category = cateRepo.findByAlias(alias);
		
		assertThat(category).isNotNull();
		assertThat(category.getAlias()).isEqualTo(alias);
	}
}
