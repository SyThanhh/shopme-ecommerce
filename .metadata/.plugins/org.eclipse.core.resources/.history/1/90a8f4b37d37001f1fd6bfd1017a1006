package com.shopme.admin.user;

import java.util.List;
import java.util.NoSuchElementException;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.shopme.admin.contstant.SystemConstant;
import com.shopme.admin.exception.UserNotFoundException;
import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;



@Service
@Transactional // trên lớp dịch vụ là một thực hành tốt trong việc phát triển ứng dụng Spring.
public class UserService {

	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	private RoleRepository roleRepo;
	
	@Autowired
	private PasswordEncoder passwordEncoder; 
	
	public List<User> listAll() {
//		return (List<User>) userRepo.findAll(Sort.by("firstName"));
		return (List<User>) userRepo.findAll();
	}
	
	public List<Role> listRoles() {
		return roleRepo.findAll();
	}
	
	// lấy list Pageable
	public Page<User> listByPage(int pageNum, String sortField, String sortDir,String keyword) {
		// check sortField and sortDir
		if (sortField == null || sortField.isEmpty()) {
	        sortField = "firstName"; // Thay bằng tên cột mặc định của bạn
	    }

	    if (sortDir == null || sortDir.isEmpty()) {
	        sortDir = "asc"; // Đặt mặc định là sắp xếp tăng dần
	    }
		Sort sort = Sort.by(sortField);
		sort = sortDir.equals("asc") ? sort.ascending() : sort.descending();
		Pageable pageable = PageRequest.of(pageNum - 1, SystemConstant.USER_PER_PAGE, sort); // tạo 1 pageable với kích thước đã định
		
		// check key word
		if(keyword != null) {
			return userRepo.findAll(keyword, pageable);
		} 
		return userRepo.findAll(pageable); // tìm all phần tử theo pageable
	}

	public User save(User user) {
		// user update
		boolean isUpdatingUser = (user.getId() != null);
		
		// check user password
		if(isUpdatingUser) {
			User existingUser = userRepo.findById(user.getId()).get();
			if(user.getPassword().isEmpty()) {
				user.setPassword(existingUser.getPassword());
			} else {
				encodePassword(user);
			}
		} else {
			encodePassword(user);
		}
		// save user		
	
		return userRepo.save(user);
	}
	
	public void encodePassword(User user) {
		String encodeddPassword = passwordEncoder.encode(user.getPassword());
		
		user.setPassword(encodeddPassword);
	}
	
	public boolean isEmailUnique(Integer id, String email) {
		User userByEmail = userRepo.getUserByEmail(email);
		if(userByEmail == null) return true;
		
		boolean isCreatingNew = (id == null);
		if(isCreatingNew) {
			if(userByEmail != null) return false;
		} else {
			// check id ủa user update vaà email tìm đc trong đb
			if(userByEmail.getId() != id) {
			
				return false;
			}
		}
		return true;
	}

	public User getUserById(Integer id) throws UserNotFoundException {
		try {
			return userRepo.findById(id).get();
		} catch(NoSuchElementException ex) {
			throw new UserNotFoundException("Could not find any User with ID " + id);
		}
		
	}
	
	public void deleteById(Integer id) throws UserNotFoundException {
		Long countById = userRepo.countById(id);
		
		if(countById == null || countById == 0) {
			throw new UserNotFoundException("Could not find any User with ID " + id);
		} 
		
		userRepo.deleteById(id);
	}
	
	public void updateUserEnabledStatus(Integer id, boolean status) {
		userRepo.updateEnabledStatus(id, status);
	}
	

}
