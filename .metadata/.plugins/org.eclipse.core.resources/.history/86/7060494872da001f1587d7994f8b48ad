package com.shopme.admin.user.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.hibernate.service.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import  org.springframework.util.StringUtils;

import com.shopme.admin.FileUploadUtil;
import com.shopme.admin.MessageAlertCheckNull;
import com.shopme.admin.contstant.SystemConstant;
import com.shopme.admin.exception.UserNotFoundException;
import com.shopme.admin.paging.PagingAndSortingHelper;
import com.shopme.admin.paging.PagingAndSortingParam;
import com.shopme.admin.user.UserService;
import com.shopme.admin.user.exproter.UserCsvExporter;
import com.shopme.admin.user.exproter.UserExcelExporter;
import com.shopme.admin.user.exproter.UserPdfExporter;
import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;


@Controller
public class UserController {

	
	@Autowired
	private UserService userService;
	
	// page first 
	@GetMapping("/users")
	private String listFirstPage(Model model, @PagingAndSortingParam PagingAndSortingHelper helper) {
		
		return "redirect:/users/page/1?sortField=firstName&sortDir=asc";
	}
	
	
	// paging 
	@GetMapping("/users/page/{pageNum}")
	public String listByPage(@PagingAndSortingParam PagingAndSortingHelper helper,
			@PathVariable(name="pageNum") int pageNum,
			Model model, @Param("sortField") String sortField, @Param("sortDir") String sortDir,
			@Param("keyword") String keyword)
	{
		Page<User> page = userService.listByPage(pageNum, sortField, sortDir, keyword);
		
		List<User> listUsers = page.getContent(); // lấy ds User
	
		// tinh vi tri hien tai
		long startCount= (pageNum - 1) * SystemConstant.USER_PER_PAGE + 1;
		
		long endCount = startCount + SystemConstant.USER_PER_PAGE - 1;
		
		if(endCount > page.getTotalElements()) {
			endCount = page.getTotalElements();
		}
		// reserver sort firstName
		String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";
		
		// show paging 
		model.addAttribute("currentPage", pageNum);
		model.addAttribute("totalPages", page.getTotalPages());
		model.addAttribute("startCount", startCount);
		model.addAttribute("endCount", endCount);
		model.addAttribute("totalItems", page.getTotalElements()); // total user
		model.addAttribute("listusers", listUsers);
		
		// sort
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		
		// reverse sort
		model.addAttribute("reverseSortDir", reverseSortDir);
		
		// keyword
		model.addAttribute("keyword", keyword);
		
		model.addAttribute("moduleURL", "/users");

		return "users/users";
	}
	
	@GetMapping("/users/new")
	public String newUser(Model model) {
		List<Role> listRoles = userService.listRoles();
		User user = new User();
		
		model.addAttribute("user", user);
		
		model.addAttribute("listroles", listRoles);
		
		model.addAttribute("pageTitle", "Create new User");
		return "users/user_form";
	}
	
	
	@PostMapping("/users/save")
	public String saveUser(User user,
			RedirectAttributes redirectAttributes,
			@RequestParam("image") MultipartFile multipartFile ) throws IOException {
		
		if(!multipartFile.isEmpty()) {
			String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename()); // sẽ làm sạch chuỗi đường dẫn tệp
			user.setPhotos(fileName);
			User savedUser = userService.save(user);
			
			String uploadDir = "user-photos/" + savedUser.getId();
			
			// clean file
			FileUploadUtil.cleanDir(uploadDir);
			
			// upload file into dir
			FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
			
		
			MessageAlertCheckNull.alertCheckNull(savedUser, redirectAttributes);
		} else {
			if (user.getPhotos() == null || user.getPhotos().isEmpty()) {
	            user.setPhotos(null);
	        }
			User savedUser = userService.save(user);

	        MessageAlertCheckNull.alertCheckNull(savedUser, redirectAttributes);
		}
		return getRedirectURLtoAffectedUser(user);
	}


	private String getRedirectURLtoAffectedUser(User user) {
		String firstPartOfEmail = user.getEmail().split("@")[0]; // chia chuỗi thành các mảng con
		return "redirect:/users/page/1?sortField=id&sortDir=asc&keyword=" + firstPartOfEmail;
	}
	
	@GetMapping("/users/edit/{id}")
	public String editUser(@PathVariable("id") Integer id,
			Model model,
			RedirectAttributes redirectAttributes) {
		try {
			List<Role> listRoles = userService.listRoles();
			User user = userService.getUserById(id);
			
			model.addAttribute("user", user);
			model.addAttribute("pageTitle", "Edit User (ID : " + id + ")");
			model.addAttribute("listroles", listRoles);
			
			return "users/user_form";
		} catch (UserNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			redirectAttributes.addFlashAttribute("typeAlert", "danger");
			return "redirect:/users";
		}
	
	
	}
	
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable("id") Integer id,
			Model model,
			RedirectAttributes redirectAttributes) {
		try {
		
			userService.deleteById(id);
			
			redirectAttributes.addFlashAttribute("message", "The User ID " + id + " has been deleted successfully");
			redirectAttributes.addFlashAttribute("typeAlert", "success");
			
			return "redirect:/users";
		} catch (UserNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			redirectAttributes.addFlashAttribute("typeAlert", "danger");
			return "redirect:/users";
		}
		
	}
	
	@GetMapping("/users/{id}/enabled/{status}")
	public String updateUserEnabledStatus(@PathVariable("id") Integer id, @PathVariable("status") boolean enabled, RedirectAttributes redirectAttributes) {
		String status = enabled ? "enabled" : "disabled";
		userService.updateUserEnabledStatus(id, enabled);
		String message = "The user ID " + id + " has been " + status + " successfully";
		redirectAttributes.addFlashAttribute("message", message);
		redirectAttributes.addFlashAttribute("typeAlert", "success");
		
		return "redirect:/users";
	}
	
	// export to CSV
	@GetMapping("/users/export/csv")
	public void exportToCSV(HttpServletResponse response) throws IOException {
		List<User> listUsers = userService.listAll();
		UserCsvExporter userCsvExporter = new UserCsvExporter();
		
		userCsvExporter.export(listUsers, response);
	}
	
	// export to Excel
	@GetMapping("/users/export/excel")
	public void exportToExcel(HttpServletResponse response) throws IOException {
		List<User> listUsers = userService.listAll();
		UserExcelExporter userExcelExporter = new UserExcelExporter();
		
		userExcelExporter.export(listUsers, response);
	}
	
	// export to pdf
		@GetMapping("/users/export/pdf")
		public void exportToPDF(HttpServletResponse response) throws IOException {
			List<User> listUsers = userService.listAll();
			UserPdfExporter userPdfExporter = new UserPdfExporter();
			
			userPdfExporter.export(listUsers, response);
		}
}
