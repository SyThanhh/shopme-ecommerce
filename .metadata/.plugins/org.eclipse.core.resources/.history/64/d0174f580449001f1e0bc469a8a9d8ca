package com.shopme.admin.brand;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.admin.FileUploadUtil;
import com.shopme.admin.MessageAlertCheckNull;
import com.shopme.admin.category.CategoryPageInfo;
import com.shopme.admin.category.CategoryService;
import com.shopme.admin.contstant.SystemConstant;
import com.shopme.admin.exception.BrandNotFoundException;
import com.shopme.common.entity.Brand;
import com.shopme.common.entity.Category;

@Controller
public class BrandController {

	@Autowired
	private BrandService brandService;
	
	@Autowired
	private CategoryService categoryService;
	
	@GetMapping("/brands")
	public String listAll(Model model) {
		List<Brand> listBrands= brandService.listAll();
		
		model.addAttribute("listBrands", listBrands);
		
		return "brands/brands";
	}
	
	@GetMapping("/brands/page/{pageNum}")
	public String listByPage(@PathVariable(name="pageNum") int pageNum,
			 @RequestParam(name = "sortDir", defaultValue = "asc") String sortDir,
			 @RequestParam(name = "sortField", defaultValue = "name") String sortField,
             @RequestParam(name = "keyword", required = false) String keyword,
	                         Model model) {

	    CategoryPageInfo categoryPageInfo = new CategoryPageInfo();
	    List<Category> listCategories = brandService.listByPage( pageNum, sortDir, keyword);

	 // tinh vi tri hien tai
		long startCount= (pageNum - 1) * SystemConstant.ROOT_CATEGORIES_PER_PAGE + 1;
		
		long endCount = startCount + SystemConstant.ROOT_CATEGORIES_PER_PAGE - 1;
		
		if(endCount > categoryPageInfo.getTotalElements()) {
			endCount = categoryPageInfo.getTotalElements();
		}
	    
	    String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";

	    // paging
	    model.addAttribute("totalPages", categoryPageInfo.getTotalPages());
	    model.addAttribute("totalItems", categoryPageInfo.getTotalElements());
	    model.addAttribute("currentPage", pageNum);
	    model.addAttribute("startCount", startCount);
	    model.addAttribute("endCount", endCount);
	    model.addAttribute("sortField", "name");
	    model.addAttribute("sortDir", sortDir);
	   
	    // list item
	    model.addAttribute("listcategories", listCategories);
	    // reverse sort
	 	model.addAttribute("reverseSortDir", reverseSortDir);

	 	// keyword
	 	 model.addAttribute("keyword", keyword);
		    
	    return "categories/categories";
	}
	
	@GetMapping("/brands/new")
	public String newBrand(Model model) {
			List<Category> listCategories = categoryService.listCategoriesUsedInForm();
			
			Brand brand = new Brand();
			
			model.addAttribute("listCategories", listCategories);
			model.addAttribute("brand", brand);
			model.addAttribute("pageTitle", "Create New Brand");
			
			return "brands/brand_form";
	}
	
	@PostMapping("/brands/save")
	public String newBrand(Brand brand,
			@RequestParam("fileImage") MultipartFile multipartFile,
			RedirectAttributes redirectAttributes) throws IOException {
			Brand saveBrand = null;
			if(!multipartFile.isEmpty()) {
				String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
				brand.setLogo(fileName);
				
				saveBrand = brandService.saveBrands(brand);
				String uploadDir = "../brands-logos/"+ saveBrand.getId();
				FileUploadUtil.cleanDir(uploadDir);
				FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
			} else {
				saveBrand = brandService.saveBrands(brand);
			}
			

			MessageAlertCheckNull.alertCheckNull(saveBrand, redirectAttributes);
			
			return "redirect:/brands";
	}
	
	@GetMapping("/brands/edit/{id}")
	public String editBrand(@PathVariable("id") Integer id,
			Model model,
			RedirectAttributes redirectAttributes) {
			
			try {
				Brand brand = brandService.get(id);
				model.addAttribute("brand", brand);
				
				List<Category> listCategories = categoryService.listCategoriesUsedInForm();
				
				model.addAttribute("listCategories", listCategories);
				model.addAttribute("pageTitle", "Eidt Brand (ID : "+ id +")");
				MessageAlertCheckNull.alertCheckNull(brand, redirectAttributes);
				return "brands/brand_form";
			} catch (BrandNotFoundException e) {
				redirectAttributes.addFlashAttribute("message", e.getMessage());
				return "redirect:/brands";
			}

		
			
	}
	
	@GetMapping("/brands/delete/{id}")
	public String deleteBrand(@PathVariable("id") Integer id,
			Model model,
			RedirectAttributes redirectAttributes) {
			try {
				brandService.delete(id);
				String brandDir = "../brand-logos/" + id;
				FileUploadUtil.removeDir(brandDir);
				
				redirectAttributes.addFlashAttribute("message", "The brand ID " + id + " has been deleted successfully");
				redirectAttributes.addFlashAttribute("typeAlert", "success");
				return "redirect:/brands";
			} catch (BrandNotFoundException e) {
				redirectAttributes.addFlashAttribute("message", e.getMessage());
				return "redirect:/brands";
			}
			
		
			
	}
}
