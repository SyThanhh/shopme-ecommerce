package com.shopme.admin.product;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Date;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.Brand;
import com.shopme.common.entity.Category;
import com.shopme.common.entity.Product;

@DataJpaTest
@AutoConfigureTestDatabase(replace=Replace.NONE)
@Rollback(false)
public class ProductRepositoryTests {
	
	
	@Autowired
	private ProductRepository poRepository;
	
	@Autowired
	private TestEntityManager entityManager;
	
	
	@Test
	public void testCreateProduct() {
		Brand brand = entityManager.find(Brand.class, 20);
		Category category = entityManager.find(Category.class, 10);
		
		Product product = new Product();
		product.setName("Laptop Gamming Itel 5");
		product.setAlias("laptop_gamming_itel_5");
		product.setShortDescription("This is product good from Acer");
		product.setFullDescription("This is .......");
		
		product.setEnable(true);
		product.setInStock(true);
		
		product.setBrand(brand);
		product.setCategory(category);
		
		product.setPrice(1000);
		product.setCost(900);
		
		product.setDiscountPercent(5.0f);
		product.setCreatedTime(new Date());
		product.setUpdatedTime(new Date());
		
		Product saveProduct = poRepository.save(product);
		
		assertThat(saveProduct).isNotNull();
		assertThat(saveProduct.getId()).isGreaterThan(0);
		
	}
	
	@Test
	public void testListAllProducts() {
		Iterable<Product> iterableProducts = poRepository.findAll();
		
		iterableProducts.forEach(System.out::println);
	}
	
	@Test
	public void getProductById() {
		Integer id = 1;
		
		Product productById = poRepository.findById(id).get();
		System.out.println(productById);
		assertThat(productById).isNotNull();
		
	}
	
	@Test
	public void testUpdateProduct() {
		Integer id = 1;
		
		Product productById = poRepository.findById(id).get();
		productById.setPrice(500);
		
		poRepository.save(productById);
		
		Product productUpdated = entityManager.find(Product.class, id);
		
		assertThat(productUpdated.getPrice()).isEqualTo(500);
		
	}
	
	@Test
	public void testDeleteProduct() {
		Integer id = 3;
		
		poRepository.deleteById(id);
		
		Product productById = poRepository.findById(id).get();
	
	
		assertThat(productById).isNull();
		
	}
}
