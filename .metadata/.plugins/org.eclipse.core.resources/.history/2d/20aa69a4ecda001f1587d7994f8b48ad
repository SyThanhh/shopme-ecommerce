package com.shopme.admin.category;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.shopme.admin.FileUploadUtil;
import com.shopme.admin.MessageAlertCheckNull;
import com.shopme.admin.category.exporter.CategoryCsvExporter;
import com.shopme.admin.contstant.SystemConstant;
import com.shopme.admin.exception.UserNotFoundException;
import com.shopme.admin.user.exproter.UserCsvExporter;
import com.shopme.common.entity.Category;
import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;
import com.shopme.common.exception.CategoryNotFoundException;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;



@Controller
public class CategoryController {

	@Autowired
	private CategoryService cateService;
	
	@GetMapping("/categories")
	public String listFirstPage(@RequestParam(name = "sortDir", defaultValue = "asc") String sortDir, Model model) {
		return "redirect:/categories/page/1?sortField=name&sortDir=asc";
	}
	

	@GetMapping("/categories/page/{pageNum}")
	public String listByPage(@PathVariable(name="pageNum") int pageNum,
	                         Model model) {

	    CategoryPageInfo categoryPageInfo = new CategoryPageInfo();
	    cateService.listByPage(categoryPageInfo, pageNum, sortDir, keyword);

	 // tinh vi tri hien tai
		long startCount= (pageNum - 1) * SystemConstant.ROOT_CATEGORIES_PER_PAGE + 1;
		
		long endCount = startCount + SystemConstant.ROOT_CATEGORIES_PER_PAGE - 1;
		
		if(endCount > categoryPageInfo.getTotalElements()) {
			endCount = categoryPageInfo.getTotalElements();
		}
	   
	   
	    // list item
	    model.addAttribute("listcategories", listCategories);
	   
		    
	 	model.addAttribute("moduleURL", "/categories");
	    return "categories/categories";
	}
	
	@GetMapping("/categories/new")
	public String newCategory(Model model) {
		List<Category> listCategories= cateService.listCategoriesUsedInForm();
		Category category = new Category();
		model.addAttribute("category", category);
		model.addAttribute("listcategories", listCategories);
		model.addAttribute("pageTitle", "Create new Category");
		return "categories/categories_form";
	}
	
	@PostMapping("/categories/save") 
	public String saveCategory(Category category, Model model,
			@RequestParam("fileImage") MultipartFile multipartFile,
			RedirectAttributes redirectAttributes) throws IOException {
		Category saveCategory = null;
		if(!multipartFile.isEmpty()) {
			String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
			category.setImage(fileName);
			
			saveCategory = cateService.saveCategory(category);
			String uploadDir = "../categories-images/" + saveCategory.getId();
			
			
			FileUploadUtil.cleanDir(uploadDir);
			
			FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
			
		} else {
			saveCategory= cateService.saveCategory(category);
		}
	
	
		MessageAlertCheckNull.alertCheckNull(saveCategory, redirectAttributes);
		return "redirect:/categories";
	}
	
	@GetMapping("/categories/edit/{id}")
	public String editCategory(@PathVariable("id") Integer id, 
	                           Model model, 
	                           RedirectAttributes redirectAttributes) {
	    try {
	        List<Category> listCategories = cateService.listCategoriesUsedInForm();
	        Category category = cateService.getCategoryById(id);

	        model.addAttribute("category", category);
	        model.addAttribute("pageTitle", "Edit Category (ID : " + id + ")");
	        model.addAttribute("listcategories", listCategories); 

	        return "categories/categories_form";
	    } catch (CategoryNotFoundException e) {
	        redirectAttributes.addFlashAttribute("message", e.getMessage());
	        redirectAttributes.addFlashAttribute("typeAlert", "danger");
	        return "redirect:/categories";
	    }
	}

	@GetMapping("/categories/{id}/enabled/{status}")
	public String updateCategoryEnabledStatus(@PathVariable("id") Integer id, @PathVariable("status") boolean enabled, RedirectAttributes redirectAttributes) {
		
		cateService.updatedCategoryEnabledStatus(id, enabled);
		String status = enabled ? "enabled" : "disabled";
		 
		String message = "The Category ID " + id +" has been " + status;
		
		redirectAttributes.addFlashAttribute("message", message);
		redirectAttributes.addFlashAttribute("typeAlert", "success");
		
		
		return "redirect:/categories";
		
	}
	
	@GetMapping("/categories/delete/{id}")
	public String deleteUser(@PathVariable("id") Integer id,
			Model model,
			RedirectAttributes redirectAttributes) {
		try {
		
			cateService.deleteById(id);
			String categorrDir = "../categires-images/" + id;
			FileUploadUtil.removeDir(categorrDir);
			
			redirectAttributes.addFlashAttribute("message", "The Category ID " + id + " has been deleted successfully");
			redirectAttributes.addFlashAttribute("typeAlert", "success");
			
			return "redirect:/categories";
		} catch (CategoryNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			redirectAttributes.addFlashAttribute("typeAlert", "danger");
			return "redirect:/categories";
		}
		
	}
	
	// export to CSV
		@GetMapping("/categories/export/csv")
		public void exportToCSV(HttpServletResponse response) throws IOException {
			List<Category> listCategories = cateService.listCategoriesUsedInForm();
			CategoryCsvExporter categoryCsvExporter = new CategoryCsvExporter();
			
			categoryCsvExporter.export(listCategories, response);
		}
}
